<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <!-- ESTILO  -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<script type="module">

  import { io } from 'https://cdn.socket.io/4.3.2/socket.io.esm.min.js'
  const API_URL = "<%= API_URL %>";

  const userOwn = '<%= username %>'
  const socket = io({
    auth: {
      username: userOwn,
      serverOffset: 0
    }
  })

  // Profile IMAGE URL
  const URLOwn = localStorage.getItem('profileURL');
  profileImage.src = `${API_URL}/uploads/${URLOwn}`



  const form = document.getElementById('form')
  const input = document.getElementById('input')
  const messages = document.getElementById('messages')

  //SOCKET CONNECTION MESSAGE
  socket.on('chat message', ({ msg, serverOffset, username, date, url }) => {
    console.log(msg)

    let newURL = url ? url : 'profile-default.jpg'
    const chatImageURL = `${API_URL}/uploads/${newURL}`

    // Perfil de usuario propio
    let isOwnMessage = username === userOwn;

    if (isOwnMessage && !url) {
      let localProfile = localStorage.getItem('profileURL')
      chatImageURL = `${API_URL}/uploads/${localProfile}`
    } else if (isOwnMessage && url) {
      localStorage.setItem('profileURL', url);
      profileImage.src = `${API_URL}/uploads/${url}`;
    }


    const item = `
        <li class="message ${isOwnMessage ? 'message-right' : ''}">
            <img src="${chatImageURL}" class="profileChat" />
            <div>
                <small>${username} - ${date}</small>
                <p>${msg}</p>
            </div>
        </li> 
    `;

    messages.insertAdjacentHTML('beforeend', item);


    socket.auth.serverOffset = serverOffset;

    messages.scrollTop = messages.scrollHeight;
  });

  form.addEventListener('submit', (e) => {
    e.preventDefault()

    if (input.value) {
      socket.emit('chat message', input.value)
      input.value = ''
    }
  })


  socket.on('users-online', (usersOnline) => {
    const usersList = document.querySelector('.online-user-list')
    usersList.innerHTML = ""

    const newUsersOnline = usersOnline.filter(user => user.username !== userOwn)

    newUsersOnline.forEach(user => {
      const div = document.createElement('div')
      div.innerHTML = `
              <div class="online-user">
          <div class="avatar-container-user-connected">
            <img src="<%= API_URL %>/uploads/${user.url}" alt="${user.username}" class="avatar-user-connected">
            <span class="status-indicator"></span>
          </div>
          <span class="username-user-connected">${user.username}</span>
        </div>
       `
      usersList.appendChild(div)
    })
  })

  socket.on('count-message', ({ countMessages }) => {
    const orderCountUser = countMessages.sort((a, b) => b.count - a.count)
    const userList = document.querySelector('.user-list')

    userList.innerHTML = ""
    orderCountUser.forEach(user => {
      const div = document.createElement('div')
      div.classList.add('user')
      div.innerHTML = `
      <img class="avatar" src= "<%= API_URL %>/uploads/${user.profile_image}"  alt="${user.user}">
      <div class="user-info">
        <div class="username">${user.user}</div>
        <div class="count">${user.count} mensajes</div>
      </div>
    `;
      userList.appendChild(div)
    })

  })


  // Recover messages
  socket.on('batch messages', (mensajes) => {
    mensajes.forEach(({ msg, serverOffset, username, date, url }) => {
      const isOwnMessage = username === userOwn;
      let profileImageURL = `${API_URL}/uploads/${url}`

      if (isOwnMessage) {
        let localProfile = localStorage.getItem('profileURL')
        profileImageURL = `${API_URL}/uploads/${localProfile}`

      }

      const item = `
      <li class="message ${isOwnMessage ? 'message-right' : ''}">
        <img src="${profileImageURL}" class="profileChat" />
        <div>
          <small>${username} - ${date}</small>
          <p>${msg}</p>
        </div>
      </li>
    `;

      messages.insertAdjacentHTML('beforeend', item);
      socket.auth.serverOffset = serverOffset;
    });

    messages.scrollTop = messages.scrollHeight;
  });

  // MENSAJE USUARIO SE CONECTO

  socket.on('user-connected', (user, userConnected) => {

    const notification = Toastify({
      text: `${user} se ha conectado`,
      duration: 3000,
      gravity: "top",
      position: "right",
      backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
      avatar: `${API_URL}/uploads/${userConnected[user][0]}`,
      stopOnFocus: true,
    })

    let usersConnected = socket.auth.userConnected || {};

    let ultimaFecha = usersConnected[user]?.[1] || null;
    let newUltimaFecha = userConnected[user][1];

    if (ultimaFecha == null) {
      socket.auth.userConnected = {
        ...socket.auth.userConnected,
        ...userConnected
      }
      // Mostrar notificación de usuario conectado
      notification.showToast();
      return
    }

    // Convertir las fechas a objetos Date para comparar

    const ultimaDate = new Date(ultimaFecha);
    const newUltimaDate = new Date(newUltimaFecha);

    const timeMS = newUltimaDate - ultimaDate;
    const diferenciaMinutos = Math.floor(timeMS / 60000); // Convertir a minutos


    if (diferenciaMinutos >= 1) {

      socket.auth.userConnected = {
        ...socket.auth.userConnected,
        ...userConnected
      }
      notification.showToast();
    }

  })

  // Upload image profile

  document.getElementById("uploadForm").addEventListener("submit", async function (event) {
    event.preventDefault();

    const fileInput = document.getElementById("userProfile");
    const file = fileInput.files[0];
    const previusFile = localStorage.getItem('profileURL')

    if (!file) {
      alert("Por favor, selecciona una imagen.");
      return;
    }

    // FormData es una interfaz que permite construir un conjunto de pares clave/valor representando los campos del formulario y sus valores, para mandarlos fácilmente a fetch.
    const formData = new FormData();
    formData.append("userProfile", file)
    formData.append("previusUserProfile", previusFile)

    try {
      const response = await fetch(`${API_URL}/chat/images`, {
        method: "POST",
        body: formData,
      });

      const result = await response.json();
      // alert('Imagen subida:');

      // Actualizar la imagen de perfil en el frontend
      const profileImage = document.getElementById('profileImage');
      localStorage.setItem('profileURL', result.imageUrl);
      profileImage.src = `${API_URL}/uploads/${result.imageUrl}`;

    } catch (error) {
      console.error("Error al subir la imagen:", error);
    }
  });



</script>
<style>
  /* Estilo global */
  body {
    font-family: Arial, sans-serif;
    background: #f4f4f4;
    margin: 0;
    display: flex;
    align-items: center;
    height: 100vh;
    flex-direction: column;
  }

  /* Estilo del perfil */
  .profile {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    width: 98vw;
  }

  #profileImage {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-left: 30px;
    object-fit: cover;

  }

  /* Estilo del chat */
  #chat {
    width: 550px;
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    margin-top: 20px;
    border: 1px solid;
  }


  #messages {
    list-style: none;
    padding: 10px;
    max-height: 300px;
    overflow-y: auto;
    overflow-x: hidden;
    word-wrap: break-word;
  }

  .message {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
  }

  .profileChat {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
  }

  .message-right {
    display: flex;
    flex-direction: row-reverse;
  }

  li>* {

    justify-items: end;
  }

  .message-right .profileChat {
    margin-left: 10px;
    margin-right: 0;
  }

  .message p {
    background: #0084ff;
    color: white;
    padding: 8px 12px;
    border-radius: 15px;
    max-width: 70%;
  }

  .message-right p {
    background: #d3d3d3;
    color: black;
  }

  /* Estilo del formulario */
  #form {
    display: flex;
    border-top: 1px solid #ddd;
    padding: 10px;
  }

  #input {
    flex: 1;
    padding: 8px;
    border: none;
    border-radius: 5px;
  }

  button {
    padding: 8px 15px;
    background: #0084ff;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    margin-left: 10px;
  }

  /* Estilo para el formulario de subida de imagen */
  #uploadForm {
    text-align: center;
    margin-top: 20px;
    width: 90vw;
    display: flex;
  }

  #userProfile {
    padding: 5px;
    margin-bottom: 10px;
  }

  h2 {
    margin-bottom: 10px;
  }

  #inputUploadIMG {
    padding: 4px;
    border: 2px solid #ddd;
    border-radius: 20px;
    outline: none;
    font-size: 8px;
    margin: 5px;
  }

  #inputUploadIMG:focus {
    border-color: #007bff;
  }

  #inputUploadIMG[type="submit"] {
    background: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 16px;
    cursor: pointer;
    transition: 0.3s;
  }

  #inputUploadIMG[type="submit"]:hover {
    background: #0056b3;
  }

  /* ESTILOS PARA EL DETAILS DE COUNT DE MENSAJES POR USUARIO */

  .main-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 40px;
    padding: 20px;
    max-height: 60vh;

  }

  #chat {
    flex: 0 1 500px;
    background-color: #fff;
    border-radius: 10px;
    padding-left: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    height: 100%;
  }

  .details-user-count {
    flex: 0 1 230px;
    background-color: #fff;
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-height: 500px;
    overflow-y: auto;
  }

  .details-user-count>summary {
    cursor: pointer;
    font-weight: bold;
    padding: 0.5rem 0;
  }

  .user-list {
    margin: 10px;
    max-height: 400px;
    overflow-y: auto;
  }

  .user {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
  }

  .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
  }

  .user-info .username {
    font-weight: bold;
  }

  .user-info .count {
    font-size: 14px;
    color: #666;
  }

  /* ESTILOS PARA EL DETAILS DE USER CONNECTED */


  .details-user-connected {
    font-family: sans-serif;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    background-color: #f9f9f9;
  }

  .details-user-connected>summary {
    cursor: pointer;
    font-weight: bold;
    padding: 0.5rem 0;
  }

  .online-user-list {
    margin-top: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .online-user {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .avatar-container-user-connected {
    position: relative;
    width: 40px;
    height: 40px;
  }

  .avatar-user-connected {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #ccc;
  }

  .status-indicator {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 10px;
    height: 10px;
    background-color: #00c853;
    border: 2px solid white;
    border-radius: 50%;
  }

  .username-user-connected {
    font-size: 1rem;
    color: #333;
  }
</style>

<body>
  <div class="profile">
    <h1>¡Bienvenido <%=username %>! a Bolu-Chat 🇦🇷</h1>
    <img id="profileImage" src="<%= API_URL %>/uploads/profile-default.jpg" alt="Imagen de perfil">
  </div>

  <div class="main-container">
    <section id="chat">
      <ul id="messages">
      </ul>
      <form id="form">
        <input type="text" name="message" id="input" placeholder="Type a message" autocomplete="off" maxlength="30">
        <button type="submit">Enviar</button>
      </form>

    </section>
    <!-- Counts Users -->
    <details class="details-user-count">
      <summary>Usuarios con más mensajes</summary>
      <div class="user-list">
      </div>
    </details>
    <details class="details-user-connected">
      <summary>Usuarios conectados</summary>
      <div class="online-user-list">
      </div>
    </details>

  </div>
  <div>
    <hr>
    <h2>Subir foto de perfil 👇</h2>

    <form id="uploadForm">
      <input type="file" name="userProfile" id="userProfile" accept="image/*">
      <input type="submit" value="Enviar" id="inputUploadIMG">
    </form>
  </div>


</body>

</html>